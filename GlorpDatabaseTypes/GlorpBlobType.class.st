Class {
	#name : #GlorpBlobType,
	#superclass : #GlorpDatabaseType,
	#instVars : [
		'queryType'
	],
	#category : #GlorpDatabaseTypes
}

{ #category : #'VisualWorks metadata' }
GlorpBlobType class >> visualWorksMetadata [

	^ #(
		'namespace' 'Glorp'
		'superclassNamespace' 'Glorp'
	)

]

{ #category : #comparing }
GlorpBlobType >> = aType [
	super = aType ifFalse: [^false].
	self queryType == self ifTrue: [^true].
	self queryType = aType queryType
		 ifFalse: [^false].
	^true.
]

{ #category : #types }
GlorpBlobType >> converterForStType: aClass [
	(aClass includesBehavior: String) ifTrue: [^self platform converterNamed: #byteArrayToString].
	self platform isPostgreSQLPlatform ifTrue: [^self platform converterNamed: #byteArrayToSQLString].
	self platform isOcelotPlatform ifTrue: [^self platform converterNamed: #blobDataToStream].
	^self platform nullConverter
]

{ #category : #'exdi specific' }
GlorpBlobType >> exdiType [
	"Return a symbol that the VisualWorks EXDI uses to indicate the database type -- this is a symbol which is often the name of a Smalltalk class, but with variations for multiple db types that correspond to the same Smalltalk symbol. It also varies by Database. This is equivalent to the values returned by methods like #odbcConversion or #oracleConversion"
	^#ByteArray.
]

{ #category : #comparing }
GlorpBlobType >> hash [
	^self queryType == self
		ifTrue: [super hash]
		ifFalse: [super hash bitXor: self queryType hash]
]

{ #category : #types }
GlorpBlobType >> impliedSmalltalkType [
	^ByteArray.
]

{ #category : #initialize }
GlorpBlobType >> initialize [
	super initialize.
	typeString := 'blob'
]

{ #category : #SQL }
GlorpBlobType >> print: aValue on: aStream [
	self platform printBlob: (aValue isNil ifTrue: [nil] ifFalse: [aValue asByteArray]) on: aStream for: self.
]

{ #category : #types }
GlorpBlobType >> queryType [
	"Return the type that we can cast an argument to in order to match against this"
	queryType isNil ifTrue: [^self].
	^queryType.
]

{ #category : #types }
GlorpBlobType >> queryType: aType [
	"Set the type that we can cast an argument to in order to match against this"
	queryType := aType.
]

{ #category : #testing }
GlorpBlobType >> requiresConvertToVarbinary [
	"This is a hack for testing against SQL Server"
	^true.
]
